// web/slotmachine/slot_machine.go
package slotmachine

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"math/rand"
	"net/http"
	"time"

	"main.go/data" // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î (data.DB)
)

// PlayResponse ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å.
type PlayResponse struct {
	Status      string   `json:"status"`
	Message     string   `json:"message"` // loss, micro_win, small, medium, big, jackpot, freespin
	Reels       []string `json:"reels"`
	WinAmount   float64  `json:"win_amount"`
	NewBalance  float64  `json:"new_balance"`
	FreeSpins   int      `json:"free_spins"`
	JackpotText string   `json:"jackpot_text,omitempty"`
	// –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π (–±–µ–∑ –≤—ã–∏–≥—Ä—ã—à–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
	VisualChanceText string `json:"visualChanceText,omitempty"`
}

// User ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user).
type User struct {
	TelegramID string
	Balance    float64
	FreeSpins  int
	TotalWin   float64
}

const (
	probLoss     = 85.0
	probSmall    = 7.0
	probMedium   = 2.0
	probBig      = 0.99
	probJackpot  = 0.01
	probFreeSpin = 5.0
)

var baseSymbols = []string{"üê¨", "üêü", "üêô", "üíé", "üåä"}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Äì —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ FS, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FS –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
type ExtendedPlayRequest struct {
	TelegramID string  `json:"telegram_id"`
	Bet        float64 `json:"bet"`
	// –†–µ–∂–∏–º –∏–≥—Ä—ã: "normal" –∏–ª–∏ "fs". –ï—Å–ª–∏ "fs", —Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—Ä–∏—Å–ø–∏–Ω—ã.
	Mode string `json:"mode"`
	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å (–µ—Å–ª–∏ Mode == "fs")
	FSCount int `json:"fsCount"`
	// –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ¬´–Ω–∞–∫—Ä—É—á–µ–Ω–Ω–æ–≥–æ —à–∞–Ω—Å–∞¬ª (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞)
	VisualChance int `json:"visualChance"`
}

// SlotMachine –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã –∏ —Ä–∞–±–æ—Ç—É —Å –ë–î.
type SlotMachine struct {
	DB *sql.DB
}

// New –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SlotMachine, –∏—Å–ø–æ–ª—å–∑—É—è data.DB
func New() *SlotMachine {
	sm := &SlotMachine{
		DB: data.DB,
	}
	sm.initTables()
	rand.Seed(time.Now().UnixNano())
	return sm
}

// initTables –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É jackpot –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ user.
func (sm *SlotMachine) initTables() {
	// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞
	_, err := sm.DB.Exec(`
		CREATE TABLE IF NOT EXISTS jackpot (
			id INTEGER PRIMARY KEY,
			amount REAL DEFAULT 0
		);
	`)
	if err != nil {
		log.Fatal(err)
	}
	_, err = sm.DB.Exec(`INSERT OR IGNORE INTO jackpot (id, amount) VALUES (1, 0);`)
	if err != nil {
		log.Fatal(err)
	}
	// –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ FreeSpin –∏ —Å—É–º–º–∞—Ä–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
	_, _ = sm.DB.Exec(`ALTER TABLE user ADD COLUMN free_spins INTEGER DEFAULT 0;`)
	_, _ = sm.DB.Exec(`ALTER TABLE user ADD COLUMN total_win REAL DEFAULT 0;`)
}

// getUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id.
func (sm *SlotMachine) getUser(telegramID string) (*User, error) {
	row := sm.DB.QueryRow("SELECT balance, free_spins, total_win FROM user WHERE telegram_id = ?", telegramID)
	user := &User{TelegramID: telegramID}
	err := row.Scan(&user.Balance, &user.FreeSpins, &user.TotalWin)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// updateUserBalance –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ —Å—É–º–º–∞—Ä–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à.
func (sm *SlotMachine) updateUserBalance(telegramID string, delta float64, win float64) error {
	_, err := sm.DB.Exec("UPDATE user SET balance = balance + ?, total_win = total_win + ? WHERE telegram_id = ?", delta, win, telegramID)
	return err
}

// updateFreeSpins —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π.
func (sm *SlotMachine) updateFreeSpins(telegramID string, newCount int) error {
	_, err := sm.DB.Exec("UPDATE user SET free_spins = ? WHERE telegram_id = ?", newCount, telegramID)
	return err
}

// getJackpot –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞.
func (sm *SlotMachine) getJackpot() (float64, error) {
	var amount float64
	err := sm.DB.QueryRow("SELECT amount FROM jackpot WHERE id = 1").Scan(&amount)
	return amount, err
}

// updateJackpot —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∂–µ–∫–ø–æ—Ç–∞.
func (sm *SlotMachine) updateJackpot(newAmount float64) error {
	_, err := sm.DB.Exec("UPDATE jackpot SET amount = ? WHERE id = 1", newAmount)
	return err
}

// generateReels –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –±–∞—Ä–∞–±–∞–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞.
func (sm *SlotMachine) generateReels(outcome string) []string {
	switch outcome {
	case "jackpot":
		sym := baseSymbols[rand.Intn(len(baseSymbols))]
		return []string{sym, sym, sym}
	case "small", "medium", "big":
		sym := baseSymbols[rand.Intn(len(baseSymbols))]
		if rand.Float64() < 0.5 {
			var other string
			for {
				other = baseSymbols[rand.Intn(len(baseSymbols))]
				if other != sym {
					break
				}
			}
			reels := []string{sym, sym, other}
			rand.Shuffle(len(reels), func(i, j int) { reels[i], reels[j] = reels[j], reels[i] })
			return reels
		}
		return []string{sym, sym, sym}
	case "freespin":
		reels := make([]string, 3)
		for i := 0; i < 3; i++ {
			reels[i] = baseSymbols[rand.Intn(len(baseSymbols))]
		}
		pos := rand.Intn(3)
		reels[pos] = "FREESPIN"
		return reels
	default: // loss ‚Äì –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–ª–∏—á–Ω—ã
		if len(baseSymbols) < 3 {
			return baseSymbols
		}
		reel1 := baseSymbols[rand.Intn(len(baseSymbols))]
		var reel2 string
		for {
			reel2 = baseSymbols[rand.Intn(len(baseSymbols))]
			if reel2 != reel1 {
				break
			}
		}
		var reel3 string
		for {
			reel3 = baseSymbols[rand.Intn(len(baseSymbols))]
			if reel3 != reel1 && reel3 != reel2 {
				break
			}
		}
		return []string{reel1, reel2, reel3}
	}
}

// Play –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.
// –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JSON —Å –ø–æ–ª—è–º–∏: telegram_id, bet, mode ("normal" –∏–ª–∏ "fs"), fsCount –∏ visualChance.
func (sm *SlotMachine) Play(w http.ResponseWriter, r *http.Request) {
	var req ExtendedPlayRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}
	if req.Bet < 0.1 || req.Bet > 30 {
		http.Error(w, "Bet must be between 0.1 and 30 USDT", http.StatusBadRequest)
		return
	}

	user, err := sm.getUser(req.TelegramID)
	if err != nil {
		http.Error(w, "User not found", http.StatusBadRequest)
		return
	}

	useFreeSpin := false
	// –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã "fs" –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å FSCount.
	if req.Mode == "fs" {
		if user.FreeSpins >= req.FSCount {
			useFreeSpin = true
			user.FreeSpins -= req.FSCount
			_ = sm.updateFreeSpins(req.TelegramID, user.FreeSpins)
		} else {
			http.Error(w, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤", http.StatusBadRequest)
			return
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º FS, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞.
		if user.Balance < req.Bet {
			http.Error(w, "Insufficient balance", http.StatusBadRequest)
			return
		}
		_ = sm.updateUserBalance(req.TelegramID, -req.Bet, 0)
		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç: 5% –æ—Ç —Å—Ç–∞–≤–∫–∏
		jackpot, _ := sm.getJackpot()
		jackpot += req.Bet * 0.05
		_ = sm.updateJackpot(jackpot)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –∏–≥—Ä—ã —Å –ø–æ–º–æ—â—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ (0-100)
	rFloat := rand.Float64() * 100
	outcome := "loss"
	multiplier := 0.0
	if rFloat < probLoss {
		outcome = "loss"
	} else if rFloat < probLoss+probSmall {
		outcome = "small"
		multiplier = 0.3 + rand.Float64()*(1.2-0.3)
	} else if rFloat < probLoss+probSmall+probMedium {
		outcome = "medium"
		multiplier = 1.5 + rand.Float64()*(4-1.5)
	} else if rFloat < probLoss+probSmall+probMedium+probBig {
		outcome = "big"
		multiplier = 5 + rand.Float64()*(30-5)
	} else if rFloat < probLoss+probSmall+probMedium+probBig+probJackpot {
		outcome = "jackpot"
		multiplier = 1500
	} else {
		outcome = "freespin"
		addFS := rand.Intn(3) + 1
		user.FreeSpins += addFS
		_ = sm.updateFreeSpins(req.TelegramID, user.FreeSpins)
	}

	// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º FS –∏ –∏—Å—Ö–æ–¥ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö FS.
	if useFreeSpin && (outcome == "small" || outcome == "medium" || outcome == "big" || outcome == "jackpot") {
		switch req.FSCount {
		case 10:
			multiplier = multiplier * 1.5
		case 30:
			multiplier = multiplier * 2.0
		default:
			multiplier = multiplier * 1.2
		}
	}

	winAmount := 0.0
	jackpotText := ""
	// –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞: –µ—Å–ª–∏ –∏—Å—Ö–æ–¥ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π, –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É.
	if outcome == "small" || outcome == "medium" || outcome == "big" || outcome == "jackpot" {
		winAmount = req.Bet * multiplier
		_ = sm.updateUserBalance(req.TelegramID, winAmount, winAmount)
	} else if outcome == "loss" {
		// –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à, –≤—ã–¥–∞—ë–º –º–∏–∫—Ä–æ-–≤—ã–∏–≥—Ä—ã—à (10% –æ—Ç —Å—Ç–∞–≤–∫–∏) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏.
		winAmount = req.Bet * 0.10
		outcome = "micro_win"
		_ = sm.updateUserBalance(req.TelegramID, winAmount, winAmount)
		// –ó–¥–µ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ VisualChance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–∫—Ä—É—á–µ–Ω–Ω—ã–π —à–∞–Ω—Å)
	} // freespin –∏—Å—Ö–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ

	// –ï—Å–ª–∏ –¥–∂–µ–∫–ø–æ—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ.
	if outcome == "jackpot" {
		jackpotWon, _ := sm.getJackpot()
		winAmount += jackpotWon
		_ = sm.updateUserBalance(req.TelegramID, jackpotWon, jackpotWon)
		jackpotText = fmt.Sprintf("üéâ Jackpot! You won an extra %.2f USDT!", jackpotWon)
		_ = sm.updateJackpot(0)
	}

	// –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à (micro_win), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
	var visualChanceText string
	if outcome == "micro_win" {
		visualChanceText = fmt.Sprintf("+%d%% –∫ —à–∞–Ω—Å—É", req.VisualChance)
	}

	reels := sm.generateReels(outcome)
	updatedUser, _ := sm.getUser(req.TelegramID)

	resp := PlayResponse{
		Status:           "ok",
		Message:          outcome,
		Reels:            reels,
		WinAmount:        winAmount,
		NewBalance:       updatedUser.Balance,
		FreeSpins:        updatedUser.FreeSpins,
		JackpotText:      jackpotText,
		VisualChanceText: visualChanceText,
	}
	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(resp)
}

// GamePageHandler —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ª–æ—Ç–æ–≤.
// –û–∂–∏–¥–∞–µ—Ç—Å—è GET-–ø–∞—Ä–∞–º–µ—Ç—Ä telegram_id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (sm *SlotMachine) GamePageHandler(w http.ResponseWriter, r *http.Request) {
	telegramID := r.URL.Query().Get("telegram_id")
	if telegramID == "" {
		http.Error(w, "telegram_id parameter is required", http.StatusBadRequest)
		return
	}
	user, err := sm.getUser(telegramID)
	if err != nil {
		http.Error(w, "User not found", http.StatusBadRequest)
		return
	}
	jackpot, _ := sm.getJackpot()
	dataTpl := struct {
		TelegramID string
		Balance    float64
		FreeSpins  int
		Jackpot    float64
	}{
		TelegramID: telegramID,
		Balance:    user.Balance,
		FreeSpins:  user.FreeSpins,
		Jackpot:    jackpot,
	}
	tmpl, err := template.ParseFiles("web/static/slot_machine.html")
	if err != nil {
		http.Error(w, "Error loading template", http.StatusInternalServerError)
		return
	}
	_ = tmpl.Execute(w, dataTpl)
}

// TopPlayersHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–∞–º.
func (sm *SlotMachine) TopPlayersHandler(w http.ResponseWriter, r *http.Request) {
	rows, err := sm.DB.Query("SELECT username, total_win FROM user ORDER BY total_win DESC LIMIT 10")
	if err != nil {
		http.Error(w, "Error fetching top players", http.StatusInternalServerError)
		return
	}
	defer rows.Close()
	type Player struct {
		Username string  `json:"username"`
		TotalWin float64 `json:"total_win"`
	}
	players := []Player{}
	for rows.Next() {
		var p Player
		err := rows.Scan(&p.Username, &p.TotalWin)
		if err != nil {
			continue
		}
		players = append(players, p)
	}
	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(players)
}
