// web/slotmachine/slot_machine.go
package slotmachine

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"math/rand"
	"net/http"
	"time"

	"main.go/data" // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î (data.DB)
)

// jackpotChance ‚Äì —Ç–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∂–µ–∫–ø–æ—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).
// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 0.001%, –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 0.0005% –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∂–µ–∫–ø–æ—Ç–∞.
var jackpotChance float64 = 0.001

// calcMultiplier —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏.
// –î–ª—è —Å—Ç–∞–≤–æ–∫ –æ—Ç 0.1 –¥–æ 0.9 JPC: –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç –ª–∏–Ω–µ–π–Ω–æ –æ—Ç 1.1 (–ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 0.1, —Ç–æ –µ—Å—Ç—å 110% –æ—Ç —Å—Ç–∞–≤–∫–∏)
// –¥–æ 1.4 (–ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 0.9, —Ç–æ –µ—Å—Ç—å 140% –æ—Ç —Å—Ç–∞–≤–∫–∏).
// –î–ª—è —Å—Ç–∞–≤–æ–∫ –æ—Ç 1 –¥–æ 30 JPC: –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç –ª–∏–Ω–µ–π–Ω–æ –æ—Ç 1.035 (–ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 1, —Ç–æ –µ—Å—Ç—å +3.5%)
// –¥–æ 1.333 (–ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 30, —Ç–æ –µ—Å—Ç—å +33.3%).
func calcMultiplier(bet float64) float64 {
	if bet < 1.0 {
		// –î–ª—è —Å—Ç–∞–≤–æ–∫ –æ—Ç 0.1 –¥–æ 0.9: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 1.1 –∏ –º–∞–∫—Å–∏–º—É–º 1.4
		// –ü—Ä–∏ bet = 0.1 -> multiplier = 1.1, –ø—Ä–∏ bet = 0.9 -> multiplier = 1.4
		return 1.1 + ((bet - 0.1) * (0.3 / 0.8))
	} else {
		// –î–ª—è —Å—Ç–∞–≤–æ–∫ –æ—Ç 1 –¥–æ 30:
		// bonusPercent = 3.5 + (bet - 1) * ((33.3 - 3.5) / (30 - 1))
		bonusPercent := 3.5 + (bet-1)*(29.8/29)
		return 1.0 + bonusPercent/100.0
	}
}

// PlayResponse ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å.
type PlayResponse struct {
	Status           string   `json:"status"`
	Message          string   `json:"message"` // –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "loss", "micro_win", "normal_win", "jackpot", "extra_spins"
	Reels            []string `json:"reels"`
	WinAmount        float64  `json:"win_amount"` // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äì —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à (–≥—Ä–æ—Å—Å - —Å—Ç–∞–≤–∫–∞), –¥–ª—è —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ ‚Äì –ø–æ–ª–Ω—ã–π (–≥—Ä–æ—Å—Å) –≤—ã–∏–≥—Ä—ã—à
	NewBalance       float64  `json:"new_balance"`
	FreeSpins        int      `json:"free_spins"`
	Jackpot          float64  `json:"jackpot"` // –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞
	JackpotText      string   `json:"jackpot_text,omitempty"`
	VisualChanceText string   `json:"visualChanceText,omitempty"`
}

// User ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user).
type User struct {
	TelegramID string
	Balance    float64
	FreeSpins  int
	TotalWin   float64
}

// ExtendedPlayRequest ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤–∫–ª—é—á–∞—é—â–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤.
type ExtendedPlayRequest struct {
	TelegramID   string  `json:"telegram_id"`
	Bet          float64 `json:"bet"`
	Mode         string  `json:"mode"`         // "normal" –∏–ª–∏ "fs"
	FSCount      int     `json:"fsCount"`      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤, –µ—Å–ª–∏ Mode == "fs"
	VisualChance int     `json:"visualChance"` // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞)
}

const (
	// –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):
	normalJackpotProb = 0.001
	normalWinProb     = 5.0
	microWinProb      = 15.0
	freeSpinProb      = 11.5
)

// baseSymbols ‚Äì –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤.
var baseSymbols = []string{"üê¨", "üêü", "üêô", "üíé", "üåä"}

// SlotMachine –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã –∏ —Ä–∞–±–æ—Ç—É —Å –ë–î.
type SlotMachine struct {
	DB *sql.DB
}

// New –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SlotMachine, –∏—Å–ø–æ–ª—å–∑—É—è data.DB.
func New() *SlotMachine {
	sm := &SlotMachine{
		DB: data.DB,
	}
	sm.initTables()
	rand.Seed(time.Now().UnixNano())
	return sm
}

// initTables –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É jackpot –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ user.
func (sm *SlotMachine) initTables() {
	_, err := sm.DB.Exec(`
		CREATE TABLE IF NOT EXISTS jackpot (
			id INTEGER PRIMARY KEY,
			amount REAL DEFAULT 0
		);
	`)
	if err != nil {
		log.Fatal(err)
	}
	_, err = sm.DB.Exec(`INSERT OR IGNORE INTO jackpot (id, amount) VALUES (1, 0);`)
	if err != nil {
		log.Fatal(err)
	}
	_, _ = sm.DB.Exec(`ALTER TABLE user ADD COLUMN free_spins INTEGER DEFAULT 0;`)
	_, _ = sm.DB.Exec(`ALTER TABLE user ADD COLUMN total_win REAL DEFAULT 0;`)
}

// getUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id.
func (sm *SlotMachine) getUser(telegramID string) (*User, error) {
	row := sm.DB.QueryRow("SELECT balance, free_spins, total_win FROM user WHERE telegram_id = ?", telegramID)
	user := &User{TelegramID: telegramID}
	err := row.Scan(&user.Balance, &user.FreeSpins, &user.TotalWin)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// updateUserBalance –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ —Å—É–º–º–∞—Ä–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à.
func (sm *SlotMachine) updateUserBalance(telegramID string, delta float64, win float64) error {
	_, err := sm.DB.Exec("UPDATE user SET balance = balance + ?, total_win = total_win + ? WHERE telegram_id = ?", delta, win, telegramID)
	return err
}

// updateFreeSpins —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ä–∞—â–µ–Ω–∏–π.
func (sm *SlotMachine) updateFreeSpins(telegramID string, newCount int) error {
	_, err := sm.DB.Exec("UPDATE user SET free_spins = ? WHERE telegram_id = ?", newCount, telegramID)
	return err
}

// getJackpot –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞.
func (sm *SlotMachine) getJackpot() (float64, error) {
	var amount float64
	err := sm.DB.QueryRow("SELECT amount FROM jackpot WHERE id = 1").Scan(&amount)
	return amount, err
}

// updateJackpot —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∂–µ–∫–ø–æ—Ç–∞.
func (sm *SlotMachine) updateJackpot(newAmount float64) error {
	_, err := sm.DB.Exec("UPDATE jackpot SET amount = ? WHERE id = 1", newAmount)
	return err
}

// generateReels –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –±–∞—Ä–∞–±–∞–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞.
func (sm *SlotMachine) generateReels(outcome string) []string {
	switch outcome {
	case "jackpot":
		sym := baseSymbols[rand.Intn(len(baseSymbols))]
		return []string{sym, sym, sym}
	case "normal_win":
		sym := baseSymbols[rand.Intn(len(baseSymbols))]
		if rand.Float64() < 0.5 {
			var other string
			for {
				other = baseSymbols[rand.Intn(len(baseSymbols))]
				if other != sym {
					break
				}
			}
			reels := []string{sym, sym, other}
			rand.Shuffle(len(reels), func(i, j int) { reels[i], reels[j] = reels[j], reels[i] })
			return reels
		}
		return []string{sym, sym, sym}
	case "micro_win":
		sym := baseSymbols[rand.Intn(len(baseSymbols))]
		var other string
		for {
			other = baseSymbols[rand.Intn(len(baseSymbols))]
			if other != sym {
				break
			}
		}
		reels := []string{sym, sym, other}
		rand.Shuffle(len(reels), func(i, j int) { reels[i], reels[j] = reels[j], reels[i] })
		return reels
	case "extra_spins":
		reels := make([]string, 3)
		for i := 0; i < 3; i++ {
			reels[i] = baseSymbols[rand.Intn(len(baseSymbols))]
		}
		pos := rand.Intn(3)
		reels[pos] = "üÜì"
		return reels
	default: // "loss" ‚Äì –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–ª–∏—á–Ω—ã.
		if len(baseSymbols) < 3 {
			return baseSymbols
		}
		reel1 := baseSymbols[rand.Intn(len(baseSymbols))]
		var reel2 string
		for {
			reel2 = baseSymbols[rand.Intn(len(baseSymbols))]
			if reel2 != reel1 {
				break
			}
		}
		var reel3 string
		for {
			reel3 = baseSymbols[rand.Intn(len(baseSymbols))]
			if reel3 != reel1 && reel3 != reel2 {
				break
			}
		}
		return []string{reel1, reel2, reel3}
	}
}

// Play –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å.
func (sm *SlotMachine) Play(w http.ResponseWriter, r *http.Request) {
	var req ExtendedPlayRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	user, err := sm.getUser(req.TelegramID)
	if err != nil {
		http.Error(w, "User not found", http.StatusBadRequest)
		return
	}

	var bet float64
	var outcome string
	var multiplier float64
	var grossWin, netWin, winAmount float64
	var jackpotText string

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤
	if req.Mode == "fs" {
		if user.FreeSpins < req.FSCount {
			http.Error(w, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤", http.StatusBadRequest)
			return
		}
		// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FSCount
		switch req.FSCount {
		case 1:
			bet = 1.0
		case 10:
			bet = 2.5
		case 30:
			bet = 6.3
		default:
			http.Error(w, "Invalid FSCount", http.StatusBadRequest)
			return
		}
		_ = sm.updateFreeSpins(req.TelegramID, user.FreeSpins-req.FSCount)

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤
		var microWinProbFS, normalWinProbFS, jackpotProbFS, extraSpinsProbFS float64
		switch req.FSCount {
		case 1:
			microWinProbFS = 5.0
			normalWinProbFS = 2.0
			jackpotProbFS = 0.0008
			extraSpinsProbFS = 3.8
		case 10:
			microWinProbFS = 10.0
			normalWinProbFS = 4.8
			jackpotProbFS = 0.0009
			extraSpinsProbFS = 5.3
		case 30:
			microWinProbFS = 15.0
			normalWinProbFS = 10.0
			jackpotProbFS = 0.001
			extraSpinsProbFS = 7.3
		}

		rFloat := rand.Float64() * 100
		switch {
		case rFloat < jackpotProbFS:
			outcome = "jackpot"
		case rFloat < jackpotProbFS+normalWinProbFS:
			outcome = "normal_win"
		case rFloat < jackpotProbFS+normalWinProbFS+microWinProbFS:
			outcome = "micro_win"
		case rFloat < jackpotProbFS+normalWinProbFS+microWinProbFS+extraSpinsProbFS:
			outcome = "extra_spins"
			user.FreeSpins += 2
			_ = sm.updateFreeSpins(req.TelegramID, user.FreeSpins)
		default:
			outcome = "loss"
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ jackpot
		jackpot, _ := sm.getJackpot()
		switch outcome {
		case "jackpot":
			// –í—ã–∏–≥—Ä—ã—à = jackpot, —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à = jackpot - bet (–¥–ª—è fs –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ)
			grossWin = jackpot
			netWin = grossWin - bet
			// –î–ª—è fs –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π (–≥—Ä–æ—Å—Å) –≤—ã–∏–≥—Ä—ã—à
			winAmount = grossWin
			_ = sm.updateUserBalance(req.TelegramID, grossWin, grossWin)
			_ = sm.updateJackpot(777)
			jackpotText = fmt.Sprintf("üéâ Jackpot! You won %.2f JPC!", jackpot)
			jackpot = 777
		case "normal_win", "micro_win":
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è fs
			if req.FSCount == 1 {
				if outcome == "micro_win" {
					winAmount = 1.2
				} else { // normal_win
					winAmount = 1.9
				}
			} else if req.FSCount == 10 {
				if outcome == "micro_win" {
					winAmount = 3.4
				} else {
					winAmount = 4.7
				}
			} else if req.FSCount == 30 {
				if outcome == "micro_win" {
					winAmount = 6.8
				} else {
					winAmount = 9.89
				}
			}
			_ = sm.updateUserBalance(req.TelegramID, winAmount, winAmount)
			jackpot += bet * 0.05
			_ = sm.updateJackpot(jackpot)
		case "extra_spins":
			winAmount = 0
		case "loss":
			winAmount = 0
			jackpot += bet * 0.05
			_ = sm.updateJackpot(jackpot)
		}
	} else {
		// –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã
		bet = req.Bet
		if user.Balance < bet {
			http.Error(w, "Insufficient balance", http.StatusBadRequest)
			return
		}
		// –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É (–≤—ã—á–∏—Ç–∞–µ–º –µ—ë –∏–∑ –±–∞–ª–∞–Ω—Å–∞)
		_ = sm.updateUserBalance(req.TelegramID, -bet, 0)
		jackpot, _ := sm.getJackpot()

		rFloat := rand.Float64() * 100
		switch {
		case rFloat < normalJackpotProb:
			outcome = "jackpot"
		case rFloat < normalJackpotProb+normalWinProb:
			outcome = "normal_win"
		case rFloat < normalJackpotProb+normalWinProb+microWinProb:
			outcome = "micro_win"
		case rFloat < normalJackpotProb+normalWinProb+microWinProb+freeSpinProb:
			outcome = "extra_spins"
			user.FreeSpins++
			_ = sm.updateFreeSpins(req.TelegramID, user.FreeSpins)
		default:
			outcome = "loss"
		}

		switch outcome {
		case "jackpot":
			grossWin = jackpot
			netWin = grossWin - bet
			winAmount = netWin
			_ = sm.updateUserBalance(req.TelegramID, grossWin, grossWin)
			_ = sm.updateJackpot(777)
			jackpotText = fmt.Sprintf("üéâ Jackpot! You won %.2f JPC!", jackpot)
			jackpot = 777
		default:
			jackpot += bet * 0.05
			_ = sm.updateJackpot(jackpot)
			if outcome == "normal_win" || outcome == "micro_win" {
				multiplier = calcMultiplier(bet)
				grossWin = bet * multiplier
				netWin = grossWin - bet
				winAmount = netWin
				_ = sm.updateUserBalance(req.TelegramID, grossWin, grossWin)
			} else if outcome == "extra_spins" || outcome == "loss" {
				winAmount = 0
			}
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
	// –ï—Å–ª–∏ outcome == "loss": –≤ 65% —Å–ª—É—á–∞–µ–≤ "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à!", –≤ 35% —Å–ª—É—á–∞–µ–≤ "+–•% –∫ —à–∞–Ω—Å—É"
	// –ï—Å–ª–∏ outcome == "micro_win": –∫–∞–∫ —Å–µ–π—á–∞—Å "+–•% –∫ —à–∞–Ω—Å—É"
	visualText := ""
	if outcome == "loss" {
		if rand.Float64()*100 < 65 {
			visualText = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à!"
		} else {
			visualText = fmt.Sprintf("+%d%% –∫ —à–∞–Ω—Å—É", req.VisualChance)
		}
	} else if outcome == "micro_win" {
		visualText = fmt.Sprintf("+%d%% –∫ —à–∞–Ω—Å—É", req.VisualChance)
	}

	resp := PlayResponse{
		Status:     "ok",
		Message:    outcome,
		Reels:      sm.generateReels(outcome),
		WinAmount:  winAmount,    // –¥–ª—è fs ‚Äì –ø–æ–ª–Ω—ã–π (–≥—Ä–æ—Å—Å) –≤—ã–∏–≥—Ä—ã—à, –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äì —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à (gross - bet)
		NewBalance: user.Balance, // –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞–µ–º –Ω–∏–∂–µ
		FreeSpins:  user.FreeSpins,
		Jackpot: func() float64 {
			j, _ := sm.getJackpot()
			return j
		}(),
		JackpotText:      jackpotText,
		VisualChanceText: visualText,
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	updatedUser, _ := sm.getUser(req.TelegramID)
	resp.NewBalance = updatedUser.Balance

	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(resp)
}

// JackpotHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ jackpot –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
func (sm *SlotMachine) JackpotHandler(w http.ResponseWriter, r *http.Request) {
	jackpot, err := sm.getJackpot()
	if err != nil {
		http.Error(w, "Error fetching jackpot", http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(map[string]float64{"jackpot": jackpot})
}

// GamePageHandler —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ª–æ—Ç–æ–≤ –ø–æ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—É telegram_id.
func (sm *SlotMachine) GamePageHandler(w http.ResponseWriter, r *http.Request) {
	telegramID := r.URL.Query().Get("telegram_id")
	if telegramID == "" {
		http.Error(w, "telegram_id parameter is required", http.StatusBadRequest)
		return
	}
	user, err := sm.getUser(telegramID)
	if err != nil {
		http.Error(w, "User not found", http.StatusBadRequest)
		return
	}
	jackpot, _ := sm.getJackpot()
	dataTpl := struct {
		TelegramID string
		Balance    float64
		FreeSpins  int
		Jackpot    float64
	}{
		TelegramID: telegramID,
		Balance:    user.Balance,
		FreeSpins:  user.FreeSpins,
		Jackpot:    jackpot,
	}
	tmpl, err := template.ParseFiles("web/static/slot_machine.html")
	if err != nil {
		http.Error(w, "Error loading template", http.StatusInternalServerError)
		return
	}
	_ = tmpl.Execute(w, dataTpl)
}

// TopPlayersHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–∞–º.
func (sm *SlotMachine) TopPlayersHandler(w http.ResponseWriter, r *http.Request) {
	rows, err := sm.DB.Query("SELECT username, total_win FROM user ORDER BY total_win DESC LIMIT 10")
	if err != nil {
		http.Error(w, "Error fetching top players", http.StatusInternalServerError)
		return
	}
	defer rows.Close()
	type Player struct {
		Username string  `json:"username"`
		TotalWin float64 `json:"total_win"`
	}
	players := []Player{}
	for rows.Next() {
		var p Player
		err := rows.Scan(&p.Username, &p.TotalWin)
		if err != nil {
			continue
		}
		players = append(players, p)
	}
	w.Header().Set("Content-Type", "application/json")
	_ = json.NewEncoder(w).Encode(players)
}
