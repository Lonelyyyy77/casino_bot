import asyncio
import logging
import sqlite3
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, InlineKeyboardButton, PreCheckoutQuery, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiocryptopay import AioCryptoPay, Networks
from aiohttp import web
from aiocryptopay.models.update import Update

from bot.database import DB_NAME
from bot.database.user.user import update_user_balance
from bot.start_bot import bot, CRYPTO_TOKEN
from bot.states.user.user import PaymentState

crypto = AioCryptoPay(
    token=CRYPTO_TOKEN,
    network=Networks.TEST_NET  # TEST_NET –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
)
web_app = web.Application()

CURRENCY_USD = 'USD'
CURRENCY = 'XTR'
STARS_RATE = 0.013
MIN_JPC = 0.1

db_lock = asyncio.Lock()

router = Router()


def choose_amount_payment_kb():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="2 JPC (2$)", callback_data="jpc_2"))
    builder.row(InlineKeyboardButton(text="5 JPC (5$)", callback_data="jpc_5"))
    builder.row(InlineKeyboardButton(text="10 JPC (10$)", callback_data="jpc_10"))
    return builder.as_markup()


def payment_kb():
    builder = InlineKeyboardBuilder()
    pay_button = InlineKeyboardButton(text="‚≠êÔ∏è PAY NOW ‚≠êÔ∏è", pay=True)
    builder.row(pay_button)
    return builder.as_markup()


def process_deposit(user_id, amount):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.
    –ó–¥–µ—Å—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ user_id –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∏–∑ –ë–î.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("UPDATE user SET balance = balance + ? WHERE id = ?", (amount, user_id))
    cursor.execute("SELECT referrer_id FROM user WHERE id = ?", (user_id,))
    referrer_row = cursor.fetchone()

    if referrer_row and referrer_row[0]:
        referrer_id = referrer_row[0]
        cursor.execute("SELECT referral_percent FROM user WHERE id = ?", (referrer_id,))
        referral_percent_row = cursor.fetchone()
        referral_percent = referral_percent_row[0] if referral_percent_row and referral_percent_row[0] else 10

        referral_reward = amount * (referral_percent / 100)

        cursor.execute(
            "UPDATE user SET balance = balance + ?, referral_earnings = referral_earnings + ? WHERE id = ?",
            (referral_reward, referral_reward, referrer_id)
        )
        cursor.execute("SELECT telegram_id FROM user WHERE id = ?", (referrer_id,))
        referrer_telegram_row = cursor.fetchone()
        conn.commit()
        conn.close()
        return referrer_telegram_row[0] if referrer_telegram_row else None, referral_reward

    conn.commit()
    conn.close()
    return None, None


async def notify_referrer_about_referral(bot, referrer_telegram_id, referral_name, deposit_amount, referral_reward):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "SELECT balance, referral_earnings FROM user WHERE telegram_id = ?",
            (referrer_telegram_id,)
        )
        row = cursor.fetchone()
        if not row:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={referrer_telegram_id}. –ù–µ –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å.")
            return

        current_balance, current_ref_earnings = row
        if current_ref_earnings is None:
            current_ref_earnings = 0

        new_balance = current_balance + referral_reward
        new_ref_earnings = current_ref_earnings + referral_reward

        cursor.execute(
            """
            UPDATE user
            SET balance = ?,
                referral_earnings = ?
            WHERE telegram_id = ?
            """,
            (new_balance, new_ref_earnings, referrer_telegram_id)
        )
        conn.commit()

        message = (
            f"üê¨ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {referral_name} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {deposit_amount:.2f} JPC.\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {referral_reward:.2f} JPC —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è!\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} JPC.\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {new_ref_earnings:.2f} JPC."
        )
        await bot.send_message(referrer_telegram_id, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()


@router.callback_query(lambda c: c.data == 'replenish')
async def replenish(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ JPC –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=choose_amount_payment_kb()
    )


@router.callback_query(lambda c: c.data == "custom_jpc")
async def custom_jpc(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ JPC, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å (–º–∏–Ω–∏–º—É–º 2 JPC):")
    await state.set_state(PaymentState.waiting_for_jpc)


@router.message(PaymentState.waiting_for_jpc)
async def process_custom_jpc(message: types.Message, state: FSMContext):
    try:
        jpc_amount = int(message.text)
        if jpc_amount < 2:
            await message.answer("–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 2 JPC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        stars_needed = jpc_amount / STARS_RATE  # –≤—ã—á–∏—Å–ª—è–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ "–∑–≤—ë–∑–¥–∞—Ö"
        await state.update_data(jpc_amount=jpc_amount, stars_needed=stars_needed)
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {jpc_amount} JPC ({jpc_amount}$). –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ {stars_needed:.2f} –∑–≤—ë–∑–¥. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment")
            ).as_markup()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ JPC (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data.startswith('jpc_'))
async def handle_jpc_choice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã (2, 5, 10 –∏ —Ç–µ—Å—Ç–æ–≤–∞—è 0.1)
    """
    try:
        jpc_amount = float(callback.data.split('_')[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    if jpc_amount < MIN_JPC:
        await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {MIN_JPC} JPC.", show_alert=True)
        return

    stars_needed = jpc_amount / STARS_RATE
    await state.update_data(jpc_amount=jpc_amount, stars_needed=stars_needed)

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏ (Telegram Pay)", callback_data="confirm_payment_stars"))
    kb.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Crypto Bot", callback_data="confirm_payment_crypto_bot"))

    await callback.message.answer(
        (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {jpc_amount} JPC (—ç—Ç–æ {jpc_amount}$).\n"
            f"–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ ~{stars_needed:.2f} –∑–≤—ë–∑–¥.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        ),
        reply_markup=kb.as_markup()
    )


@router.callback_query(lambda c: c.data == "confirm_payment_crypto_bot")
async def handle_crypto_payment(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Crypto Bot, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º invoice_id –≤ –ë–î,
    –≤—ã–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.
    """
    data = await state.get_data()
    jpc_amount = data.get('jpc_amount', 0)
    user_id = callback.from_user.id

    if float(jpc_amount) < 1 and str(jpc_amount) != '0.1':
        await callback.message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ USDT –∏–ª–∏ TON ‚Äî 1 USD.")
        return

    try:
        invoice = await crypto.create_invoice(
            amount=float(jpc_amount),
            fiat='USD',
            currency_type='fiat'
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO payments (invoice_id, user_id, jpc_amount, status)
        VALUES (?, ?, ?, ?)
        """,
        (invoice.invoice_id, user_id, jpc_amount, 'pending')
    )
    conn.commit()
    conn.close()

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.bot_invoice_url))

    await callback.message.answer(
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ:\n{invoice.bot_invoice_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=kb.as_markup()
    )
    asyncio.create_task(check_payment_crypto_bot(user_id, invoice.invoice_id, jpc_amount))


@router.callback_query(lambda c: c.data == 'confirm_payment_stars')
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    user_data = await state.get_data()
    jpc_amount = user_data.get('jpc_amount')
    stars_needed = user_data.get('stars_needed')

    labeled_price = [LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount=int(stars_needed))]
    await callback.message.answer_invoice(
        title=f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {jpc_amount} JPC",
        description=f"–û–ø–ª–∞—Ç–∞ {jpc_amount} JPC –Ω–∞ —Å—É–º–º—É {int(stars_needed)} –∑–≤—ë–∑–¥",
        payload=f"payment_{jpc_amount}",
        provider_token="",
        currency=CURRENCY,
        prices=labeled_price,
        reply_markup=payment_kb(),
    )


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.callback_query(lambda c: c.data == '123')
@router.message(F.successful_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Pay.
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.
    """
    user_data = await state.get_data()
    jpc_amount = user_data.get("jpc_amount")
    if not jpc_amount:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ñ—É–Ω–∫—Ü–∏—è update_user_balance –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    update_user_balance(telegram_id=message.from_user.id, jpc_amount=jpc_amount)

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id, balance FROM user WHERE telegram_id = ?", (message.from_user.id,))
        user_row = cursor.fetchone()
        if not user_row:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_id, current_balance = user_row
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
        cursor.execute("SELECT referrer_id, referral_percent FROM user WHERE id = ?", (user_id,))
        ref_data = cursor.fetchone()
        if not ref_data or not ref_data[0]:
            await message.answer(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {jpc_amount} JPC. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
            return

        referrer_id, referral_percent = ref_data
        cursor.execute("SELECT telegram_id FROM user WHERE id = ?", (referrer_id,))
        referrer_telegram_data = cursor.fetchone()
        if not referrer_telegram_data:
            print(f"–ü—Ä–æ–±–ª–µ–º–∞: Referrer {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ user.")
            await message.answer(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {jpc_amount} JPC. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
            return

        referrer_telegram_id = referrer_telegram_data[0]
        referral_reward = jpc_amount * (referral_percent / 100.0)
        await notify_referrer_about_referral(
            bot=message.bot,
            referrer_telegram_id=referrer_telegram_id,
            referral_name=message.from_user.first_name,
            deposit_amount=jpc_amount,
            referral_reward=referral_reward
        )

        await message.answer(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {jpc_amount} JPC. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    finally:
        conn.close()


async def check_payment_crypto_bot(user_id, invoice_id, jpc_amount):
    """
    –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞.
    –ï—Å–ª–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (60 —Ü–∏–∫–ª–æ–≤ –ø–æ 5 —Å–µ–∫—É–Ω–¥) –∏–Ω–≤–æ–π—Å —Ç–∞–∫ –∏ –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    channel_id = -1002453573888  # –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    username = (await bot.get_chat(user_id)).username or f"ID: {user_id}"  # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º

    for _ in range(60):
        await asyncio.sleep(5)
        try:
            async with db_lock:
                conn = sqlite3.connect(DB_NAME)
                cursor = conn.cursor()
                cursor.execute("SELECT status FROM payments WHERE invoice_id=?", (invoice_id,))
                row = cursor.fetchone()
                conn.close()
            if row and row[0] == 'paid':
                return

            invoices = await crypto.get_invoices(invoice_ids=[invoice_id])
            if invoices and invoices[0].status == "paid":
                async with db_lock:
                    conn = sqlite3.connect(DB_NAME)
                    cursor = conn.cursor()
                    cursor.execute("UPDATE payments SET status='paid' WHERE invoice_id=?", (invoice_id,))
                    conn.commit()
                    conn.close()

                update_user_balance(user_id, jpc_amount)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
                async with db_lock:
                    conn = sqlite3.connect(DB_NAME)
                    cursor = conn.cursor()
                    cursor.execute(
                        """
                        SELECT referrer_id, referral_percent
                        FROM user
                        WHERE telegram_id=?
                        """,
                        (user_id,)
                    )
                    ref_data = cursor.fetchone()
                    if ref_data and ref_data[0]:
                        referrer_id, referral_percent = ref_data
                        if not referral_percent:
                            referral_percent = 10
                        referral_reward = jpc_amount * (referral_percent / 100.0)
                        cursor.execute(
                            """
                            UPDATE user
                            SET balance = balance + ?,
                                referral_earnings = referral_earnings + ?
                            WHERE telegram_id = ?
                            """,
                            (referral_reward, referral_reward, referrer_id)
                        )
                        await bot.send_message(referrer_id,
                                               f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_reward:.2f} JPC!')
                        conn.commit()
                    conn.close()

                await bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {jpc_amount} JPC!")
                log_message = (f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!*\n"
                               f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                               f"üí≥ –°—É–º–º–∞: {jpc_amount:.2f} JPC\n"
                               f"üÜî Invoice ID: `{invoice_id}`\n"
                               f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")

                await bot.send_message(channel_id, log_message)
                return

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∑–∞ 5 –º–∏–Ω—É—Ç
    await bot.send_message(user_id, "‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ–ø–ª–∞—Ç—É –≤ –∫–∞–Ω–∞–ª
    log_message = (f"‚ö†Ô∏è *–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üí≥ –°—É–º–º–∞: {jpc_amount:.2f} JPC\n"
                   f"üÜî Invoice ID: `{invoice_id}`\n"
                   f"‚ùå –°—Ç–∞—Ç—É—Å: –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
    await bot.send_message(channel_id, log_message, parse_mode="Markdown")


@crypto.pay_handler()
async def invoice_paid(update: Update, app: web.Application):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ 'paid' –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î, –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å.
    """
    logging.info(f"[CryptoBot] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {update}")
    invoice = update.invoice
    if not invoice:
        logging.info("[CryptoBot] Invoice –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update")
        return

    if invoice.status != 'paid':
        logging.info(f"[CryptoBot] Invoice status is not 'paid': {invoice.status}")
        return

    invoice_id = invoice.invoice_id
    paid_amount = invoice.amount
    asset = invoice.asset
    logging.info(f"[CryptoBot] Invoice={invoice_id} –æ–ø–ª–∞—á–µ–Ω. {paid_amount} {asset}.")

    async with db_lock:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT user_id, jpc_amount, status
            FROM payments
            WHERE invoice_id=?
            """,
            (invoice_id,)
        )
        row = cursor.fetchone()
        if not row:
            conn.close()
            logging.info(f"[CryptoBot] –ù–µ –Ω–∞—à–ª–∏ invoice_id={invoice_id} –≤ —Ç–∞–±–ª–∏—Ü–µ payments.")
            return

        user_id, jpc_amount, current_status = row
        if current_status == 'paid':
            conn.close()
            logging.info(f"[CryptoBot] Invoice={invoice_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'paid'.")
            return

        cursor.execute(
            """
            UPDATE payments
            SET status='paid'
            WHERE invoice_id=?
            """,
            (invoice_id,)
        )
        conn.commit()
        conn.close()

    update_user_balance(user_id, jpc_amount)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await bot.get_chat(user_id)
    username = user_data.username or f"ID: {user_id}"

    channel_id = -1002453573888
    log_message = (f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!*\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üí≥ –°—É–º–º–∞: {paid_amount} {asset}\n"
                   f"üÜî Invoice ID: `{invoice_id}`\n"
                   f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")

    await bot.send_message(channel_id, log_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {paid_amount} {asset}!")

    logging.info(f"[CryptoBot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {jpc_amount} JPC. invoice_id={invoice_id}")


web_app.add_routes([web.post('/crypto-secret-path', crypto.get_updates)])

# @router.callback_query(lambda c: c.data == "check_referral")
# async def handle_check_referral(callback: types.CallbackQuery):
#     user_telegram_id = callback.from_user.id
#     user_name = callback.from_user.first_name
#
#     conn = sqlite3.connect(DB_NAME)
#     cursor = conn.cursor()
#
#     try:
#         cursor.execute(
#             "SELECT id, balance FROM user WHERE telegram_id = ?",
#             (user_telegram_id,)
#         )
#         user_data = cursor.fetchone()
#         if not user_data:
#             await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
#             return
#
#         user_id, deposit_amount = user_data
#
#         cursor.execute(
#             "SELECT referrer_id, referral_percent FROM user WHERE id = ?",
#             (user_id,)
#         )
#         referrer_data = cursor.fetchone()
#
#         if not referrer_data or not referrer_data[0]:
#             await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.", show_alert=True)
#             return
#
#         referrer_id, referral_percent = referrer_data
#
#         print(f"Referrer Data: {referrer_data}")
#
#         cursor.execute(
#             "SELECT telegram_id FROM user WHERE telegram_id = ?",
#             (referrer_id,)
#         )
#
#         referrer_telegram_id = cursor.fetchone()
#
#         if not referrer_telegram_id:
#             print(f"–ü—Ä–æ–±–ª–µ–º–∞: Referrer ID {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ user.")
#             await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
#             return
#
#         referrer_telegram_id = referrer_telegram_id[0]
#
#         referral_reward = deposit_amount * (referral_percent / 100)
#
#         await notify_referrer_about_referral(
#             bot=callback.bot,
#             referrer_telegram_id=referrer_telegram_id,
#             referral_name=user_name,
#             deposit_amount=deposit_amount,
#             referral_reward=referral_reward
#         )
#
#         await callback.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É!")
#
#     except Exception as e:
#         await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
#
#     finally:
#         conn.close()
