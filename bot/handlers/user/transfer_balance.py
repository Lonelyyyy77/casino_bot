import sqlite3

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InputFile, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database import DB_NAME
from bot.database.user.user import get_menu_image
from bot.states.user.user import TransferState

router = Router()


@router.callback_query(lambda c: c.data == "transfer_balance")
async def start_transfer(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TransferState.enter_username)

    transfer_image = get_menu_image("transfer")

    text = (
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JPC\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω–æ, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–ø–∞–¥—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç.\n"
        "–ü—Ä–∏–º–µ—Ä: @Durov"
    )

    if transfer_image:
        if isinstance(transfer_image, str):
            photo = transfer_image
        else:
            photo = InputFile(transfer_image)

        try:
            media = InputMediaPhoto(media=photo, caption=text)
            await callback.message.edit_media(media=media)
        except:
            await callback.message.answer_photo(photo=photo, caption=text)
    else:
        await callback.message.answer(text)


@router.message(TransferState.enter_username)
async def enter_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith("@"):
        await message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(target_username=username)
    await state.set_state(TransferState.enter_amount)

    transfer_image = get_menu_image("transfer")

    text = (
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—É–º–º—É —Å –∫–æ–ø–µ–π–∫–∞–º–∏, –æ–±–æ–∑–Ω–∞—á–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.\n"
        "–ü—Ä–∏–º–µ—Ä: 7.75"
    )

    if transfer_image:
        if isinstance(transfer_image, str):
            photo = transfer_image
        else:
            photo = InputFile(transfer_image)

        await message.answer_photo(photo=photo, caption=text)
    else:
        await message.answer(text)


@router.message(TransferState.enter_amount)
async def enter_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 7.75")
        return

    user_data = await state.get_data()
    target_username = user_data.get("target_username")
    await state.update_data(amount=amount)

    await state.set_state(TransferState.confirm_transfer)

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üí∏ –ü–µ—Ä–µ–¥–∞—Ç—å", callback_data="confirm_transfer"))
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_transfer"))

    transfer_image = get_menu_image("transfer")

    text = f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å {target_username} {amount:.2f} JPC.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if transfer_image:
        if isinstance(transfer_image, str):
            photo = transfer_image
        else:
            photo = InputFile(transfer_image)

        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.as_markup())
    else:
        await message.answer(text, reply_markup=kb.as_markup())


@router.callback_query(lambda c: c.data == "confirm_transfer", TransferState.confirm_transfer)
async def confirm_transfer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sender_id = callback.from_user.id
    target_username = data.get("target_username")
    amount = data.get("amount")

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT id, telegram_id FROM user WHERE username = ?", (target_username.strip("@"),))
    target_user = cursor.fetchone()

    if not target_user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    target_user_id, target_user_telegram_id = target_user

    cursor.execute("SELECT balance FROM user WHERE telegram_id = ?", (sender_id,))
    sender_balance = cursor.fetchone()

    if not sender_balance or sender_balance[0] < amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.", show_alert=True)
        conn.close()
        return

    cursor.execute("UPDATE user SET balance = balance - ? WHERE telegram_id = ?", (amount, sender_id))
    cursor.execute("UPDATE user SET balance = balance + ? WHERE id = ?", (amount, target_user_id))
    conn.commit()
    conn.close()

    transfer_image = get_menu_image("transfer")

    text = f"{amount:.2f} JPC –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}"

    if transfer_image:
        if isinstance(transfer_image, str):
            photo = transfer_image
        else:
            photo = InputFile(transfer_image)

        await callback.message.answer_photo(photo=photo, caption=text)
    else:
        await callback.message.answer(text)

    try:
        await callback.bot.send_message(
            target_user_telegram_id,
            f"üí∏ –í–∞–º –ø—Ä–∏—à–ª–∏ {amount:.2f} JPC –æ—Ç @{callback.from_user.username}"
        )
    except:
        pass

    await state.clear()


@router.callback_query(lambda c: c.data == "cancel_transfer", TransferState.confirm_transfer)
async def cancel_transfer(callback: types.CallbackQuery, state: FSMContext):
    transfer_image = get_menu_image("transfer")

    text = "‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

    if transfer_image:
        if isinstance(transfer_image, str):
            photo = transfer_image
        else:
            photo = InputFile(transfer_image)

        await callback.message.answer_photo(photo=photo, caption=text)
    else:
        await callback.message.answer(text)

    await state.clear()

