import asyncio
import sqlite3

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database import DB_NAME
from bot.database.user.user import get_menu_image
from bot.start_bot import bot
from bot.states.user.user import BetState

router = Router()

conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()


@router.callback_query(lambda c: c.data == 'games')
async def games(callback: CallbackQuery):
    telegram_id = callback.from_user.id

    cursor.execute("SELECT balance, current_bet, total_bets FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data_bet = cursor.fetchone()

    games_image = get_menu_image("games")

    text = "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>"

    keyboard = get_game_keyboard(current_bet=user_data_bet[1])

    if games_image:
        media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
        await callback.message.edit_media(media, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(
    lambda c: c.data in ['bones_game', 'basketball_game', 'bowling_game', 'darts_game', 'football_game'])
async def game_selected(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    username = callback.from_user.username or f"ID: {telegram_id}"

    cursor.execute("SELECT balance, current_bet, total_bets FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    balance, current_bet, total_bets = user_data

    if balance < current_bet:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=False)
        return

    channel_id = -1002311474812
    game_name_map = {
        "bones_game": "üé≤ –ö–æ—Å—Ç–∏",
        "basketball_game": "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª",
        "bowling_game": "üé≥ –ë–æ—É–ª–∏–Ω–≥",
        "darts_game": "üéØ –î–∞—Ä—Ç—Å",
        "football_game": "‚öΩ –§—É—Ç–±–æ–ª"
    }
    game_name = game_name_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")

    if callback.data in ["bones_game", "bowling_game"]:
        kb = InlineKeyboardBuilder()
        kb.add(
            InlineKeyboardButton(text='–ë–æ–ª—å—à–µ 3Ô∏è‚É£', callback_data=f"{callback.data}_over"),
            InlineKeyboardButton(text='–ú–µ–Ω—å—à–µ 3Ô∏è‚É£', callback_data=f"{callback.data}_under")
        )

        text = f"üé∞ {game_name}!\n–ù–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç–µ?"
        games_image = get_menu_image("games")

        if games_image:
            media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
            await callback.message.edit_media(media, reply_markup=kb.as_markup())
        else:
            await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        return

    if callback.data == "darts_game":
        kb = InlineKeyboardBuilder()
        kb.add(
            InlineKeyboardButton(text='üî¥ –ù–∞ –∫—Ä–∞—Å–Ω–æ–µ', callback_data="darts_red"),
            InlineKeyboardButton(text='‚ö™ –ù–∞ –±–µ–ª–æ–µ', callback_data="darts_white")
        )

        text = f"üéØ {game_name}!\n–ù–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç–µ?"
        games_image = get_menu_image("games")

        if games_image:
            media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
            await callback.message.edit_media(media, reply_markup=kb.as_markup())
        else:
            await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        return

    emoji_map = {
        'basketball_game': 'üèÄ',
        'football_game': '‚öΩ'
    }

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É
    cursor.execute("UPDATE user SET balance = balance - ?, total_bets = total_bets + ? WHERE telegram_id = ?",
                   (current_bet, current_bet, telegram_id))
    conn.commit()

    dice_message = await callback.message.answer_dice(emoji=emoji_map[callback.data])
    await asyncio.sleep(4)
    result = dice_message.dice.value

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try:
        await dice_message.delete()
    except:
        pass

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if callback.data == 'football_game':  # –§—É—Ç–±–æ–ª: 1-2 (–º–∏–º–æ) | 3-6 (–≥–æ–ª)
        if result >= 3:
            winnings = calculate_winnings(current_bet)
            cursor.execute("UPDATE user SET balance = balance + ? WHERE telegram_id = ?", (winnings, telegram_id))
            conn.commit()
            result_message = f"‚öΩ –ì–æ–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings:.2f} USDT\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - current_bet + winnings:.2f} USDT"
            game_outcome = f"‚úÖ –ü–æ–±–µ–¥–∞ (+{winnings:.2f} USDT)"
        else:
            result_message = f"‚öΩ –ú–∏–º–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - current_bet:.2f} USDT"
            game_outcome = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"

    else:  # –ë–∞—Å–∫–µ—Ç–±–æ–ª: –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–≤—ã—à–µ 3 - –ø–æ–±–µ–¥–∞)
        if result > 3:
            winnings = calculate_winnings(current_bet)
            cursor.execute("UPDATE user SET balance = balance + ? WHERE telegram_id = ?", (winnings, telegram_id))
            conn.commit()
            result_message = f"üèÄ –û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings:.2f} USDT\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - current_bet + winnings:.2f} USDT"
            game_outcome = f"‚úÖ –ü–æ–±–µ–¥–∞ (+{winnings:.2f} USDT)"
        else:
            result_message = f"üèÄ –ù–µ—É–¥–∞—á–Ω—ã–π –±—Ä–æ—Å–æ–∫. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - current_bet:.2f} USDT"
            game_outcome = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª
    log_message = (f"üé∞ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üéÆ –ò–≥—Ä–∞: {game_name}\n"
                   f"üí∞ –°—Ç–∞–≤–∫–∞: {current_bet:.2f} USDT\n"
                   f"üé≤ –í—ã–ø–∞–ª–æ: {result}\n"
                   f"üèÜ –ò—Ç–æ–≥: {game_outcome}")

    await bot.send_message(channel_id, log_message)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏
    await callback.answer(result_message, show_alert=True)
    cursor.execute("SELECT balance, current_bet FROM user WHERE telegram_id = ?", (telegram_id,))
    updated_user_data = cursor.fetchone()
    updated_balance, updated_bet = updated_user_data

    text = "üéÆ <b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!</b>"

    keyboard = get_game_keyboard(updated_bet)

    games_image = get_menu_image("games")

    if games_image:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        await callback.message.answer_photo(photo=games_image, caption=text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data in ['darts_red', 'darts_white'])
async def darts_result(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    telegram_id = callback.from_user.id
    username = callback.from_user.username or f"ID: {telegram_id}"
    user_choice = callback.data.split('_')[1]  # "red" –∏–ª–∏ "white"

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞
    cursor.execute("SELECT balance, current_bet FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data = cursor.fetchone()
    if not user_data:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    balance, current_bet = user_data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞ (–¥–∞—Ä—Ç—Å)
    dice_message = await callback.message.answer_dice(emoji="üéØ")
    await asyncio.sleep(4)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    result = dice_message.dice.value

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    try:
        await dice_message.delete()
    except Exception:
        pass

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ü–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–≤—à–µ–º—É —á–∏—Å–ª—É:
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ (1, 3, 5) ‚Üí –ö—Ä–∞—Å–Ω–æ–µ, –µ—Å–ª–∏ —á—ë—Ç–Ω–æ–µ (2, 4, 6) ‚Üí –ë–µ–ª–æ–µ.
    if result == 1:
        outcome_color = None
        outcome_color_text = "–í—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç"
    elif result % 2 == 1:
        outcome_color = "white"
        outcome_color_text = "‚ö™ –ë–µ–ª–æ–µ"
    else:
        outcome_color = "red"
        outcome_color_text = "üî¥ –ö—Ä–∞—Å–Ω–æ–µ"

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
    if user_choice == outcome_color:
        winnings = calculate_winnings(current_bet)
        cursor.execute("UPDATE user SET balance = balance + ? WHERE telegram_id = ?", (winnings, telegram_id))
        conn.commit()
        new_balance = balance - current_bet + winnings
        result_message = (
            f"üéØ –¢–æ—á–Ω–æ –≤ —Ü–µ–ª—å! –í—ã –≤—ã–±—Ä–∞–ª–∏ {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if user_choice == 'red' else '‚ö™ –ë–µ–ª–æ–µ'} "
            f"–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings:.2f} USDT\n–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
        )
        game_outcome = f"‚úÖ –ü–æ–±–µ–¥–∞ (+{winnings:.2f} USDT)"
    else:
        new_balance = balance - current_bet
        result_message = (
            f"üéØ –ü—Ä–æ–º–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í—ã–ø–∞–ª–æ: {outcome_color_text}\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
        )
        game_outcome = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–∞–Ω–∞–ª
    channel_id = -1002311474812
    log_message = (
        f"üé∞ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
        f"üéØ –î–∞—Ä—Ç—Å\n"
        f"üé® –í—ã–±–æ—Ä: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if user_choice == 'red' else '‚ö™ –ë–µ–ª–æ–µ'}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {current_bet:.2f} USDT\n"
        f"üéØ –í—ã–ø–∞–ª–æ: {result} ({outcome_color_text})\n"
        f"üèÜ –ò—Ç–æ–≥: {game_outcome}"
    )
    await bot.send_message(channel_id, log_message)
    await callback.answer(result_message, show_alert=True)

    updated_user_data = cursor.execute("SELECT balance, current_bet FROM user WHERE telegram_id = ?",
                                       (telegram_id,)).fetchone()
    updated_balance, updated_bet = updated_user_data

    games_image = get_menu_image("games")

    if games_image:
        await callback.message.answer_photo(photo=games_image, caption="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é! üéÆ",
                                            reply_markup=get_game_keyboard(updated_bet), parse_mode="HTML")
    else:
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é! üéÆ",
                                      reply_markup=get_game_keyboard(updated_bet), parse_mode="HTML")


@router.callback_query(lambda c: c.data.endswith('_over') or c.data.endswith('_under'))
async def process_bet_choice(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    telegram_id = callback.from_user.id
    username = callback.from_user.username or f"ID: {telegram_id}"  # –ë–µ—Ä–µ–º username –∏–ª–∏ ID

    data_parts = callback.data.rsplit('_', maxsplit=1)
    if len(data_parts) != 2:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏.")
        return

    game_choice, bet_type = data_parts

    cursor.execute("SELECT balance, current_bet FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    balance, current_bet = user_data

    game_emojis = {
        "bones_game": "üé≤",
        "bowling_game": "üé≥"
    }
    dice_emoji = game_emojis.get(game_choice)

    if not dice_emoji:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–≥—Ä–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –±—Ä–æ—Å–∫–∞
    dice_message = await callback.message.answer_dice(emoji=dice_emoji)
    await asyncio.sleep(5)
    result = dice_message.dice.value

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    try:
        await dice_message.delete()
    except:
        pass

    win_condition = (result > 3 and bet_type == "over") or (result <= 3 and bet_type == "under")

    if win_condition:  # –ü–æ–±–µ–¥–∞
        winnings = calculate_winnings(current_bet)
        cursor.execute("UPDATE user SET balance = balance + ? WHERE telegram_id = ?", (winnings, telegram_id))
        conn.commit()
        result_message = f"{dice_emoji} –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {result}. –ü–æ–±–µ–¥–∞!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {winnings:.2f} USDT\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance + winnings:.2f} USDT"
        game_outcome = f"‚úÖ –ü–æ–±–µ–¥–∞ (+{winnings:.2f} USDT)"
    else:  # –ü—Ä–æ–∏–≥—Ä—ã—à
        result_message = f"{dice_emoji} –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {result}. –ü—Ä–æ–∏–≥—Ä—ã—à!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT"
        game_outcome = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª
    channel_id = -1002311474812
    log_message = (f"üé∞ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üéÆ –ò–≥—Ä–∞: {game_choice.replace('_game', '').title()}\n"
                   f"üí∞ –°—Ç–∞–≤–∫–∞: {current_bet:.2f} USDT\n"
                   f"üé≤ –í—ã–ø–∞–ª–æ: {result}\n"
                   f"üèÜ –ò—Ç–æ–≥: {game_outcome}")

    await bot.send_message(channel_id, log_message)
    await callback.answer(result_message, show_alert=True)

    updated_user_data = cursor.execute("SELECT balance, current_bet FROM user WHERE telegram_id = ?",
                                       (telegram_id,)).fetchone()
    updated_balance, updated_bet = updated_user_data

    games_image = get_menu_image("games")

    if games_image:
        await callback.message.answer_photo(photo=games_image, caption="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é! üéÆ",
                                            reply_markup=get_game_keyboard(updated_bet), parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é! üéÆ",
                                      reply_markup=get_game_keyboard(updated_bet), parse_mode="HTML")


def calculate_winnings(bet):
    cursor.execute("SELECT percentage FROM game_settings WHERE id = 1")
    settings = cursor.fetchone()
    percentage = settings[0] / 100 if settings else 0.1
    return bet + (bet * percentage)


@router.callback_query(lambda c: c.data in ['increase_bet', 'decrease_bet'])
async def change_bet(callback: CallbackQuery):
    telegram_id = callback.from_user.id

    cursor.execute("SELECT current_bet FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return

    current_bet = user_data[0]

    if callback.data == 'increase_bet':
        if current_bet >= 30:
            await callback.answer("–°—Ç–∞–≤–∫–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è!", show_alert=False)
            return
        current_bet = min(current_bet * 2, 30)

    elif callback.data == 'decrease_bet':
        if current_bet <= 0.1:
            await callback.answer("–°—Ç–∞–≤–∫–∞ —É–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è!", show_alert=False)
            return
        current_bet = max(current_bet / 2, 0.1)

    cursor.execute("UPDATE user SET current_bet = ? WHERE telegram_id = ?", (current_bet, telegram_id))
    conn.commit()

    kb = get_game_keyboard(current_bet)

    new_message = f"üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_bet:.1f} USDT"

    games_image = get_menu_image("games")

    if games_image:
        media = InputMediaPhoto(media=games_image, caption=new_message, parse_mode="HTML")
        await callback.message.edit_media(media, reply_markup=kb)
    else:
        await callback.message.edit_text(new_message, reply_markup=kb, parse_mode="HTML")

    await callback.answer()


@router.callback_query(lambda c: c.data == 'enter_bet')
async def enter_bet(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç 0.1 –¥–æ 30 USDT):"
    games_image = get_menu_image("games")

    if games_image:
        media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
        sent_message = await callback.message.edit_media(media)
    else:
        sent_message = await callback.message.edit_text(text, parse_mode="HTML")

    await state.update_data(bot_message_id=sent_message.message_id)
    await state.set_state(BetState.waiting_for_bet)


@router.message(BetState.waiting_for_bet)
async def process_bet_input(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    bet_amount = message.text.replace(',', '.')

    try:
        bet_amount = float(bet_amount)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 30 USDT.")
        return

    if bet_amount < 0.1 or bet_amount > 30:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 0.1 –¥–æ 30 USDT.")
        return

    cursor.execute("UPDATE user SET current_bet = ? WHERE telegram_id = ?", (bet_amount, telegram_id))
    conn.commit()

    await message.delete()

    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")

    kb = get_game_keyboard(bet_amount)
    text = f"üé∞ <b>–°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {bet_amount:.1f} USDT"
    games_image = get_menu_image("games")

    if bot_message_id:
        try:
            if games_image:
                media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
                await message.bot.edit_message_media(media=media, chat_id=message.chat.id, message_id=bot_message_id, reply_markup=kb)
            else:
                await message.bot.edit_message_text(text, chat_id=message.chat.id, message_id=bot_message_id, reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")

    await state.clear()



@router.callback_query(lambda c: c.data == 'reset_bet')
async def reset_bet(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    default_bet = 1.0

    cursor.execute("UPDATE user SET current_bet = ? WHERE telegram_id = ?", (default_bet, telegram_id))
    conn.commit()

    kb = get_game_keyboard(default_bet)
    text = f"üé∞ <b>–°—Ç–∞–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞:</b> {default_bet:.1f} USDT"
    games_image = get_menu_image("games")

    try:
        if games_image:
            media = InputMediaPhoto(media=games_image, caption=text, parse_mode="HTML")
            await callback.message.edit_media(media, reply_markup=kb)
        else:
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.answer()


def get_game_keyboard(current_bet):
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text='üé≤ –ö–æ—Å—Ç–∏', callback_data='bones_game'))
    kb.row(InlineKeyboardButton(text='üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª', callback_data='basketball_game'))
    kb.row(InlineKeyboardButton(text='üé≥ –ë–æ—É–ª–∏–Ω–≥', callback_data='bowling_game'))
    kb.row(InlineKeyboardButton(text='üéØ –î–∞—Ä—Ç—Å', callback_data='darts_game'))
    kb.row(InlineKeyboardButton(text='‚öΩ –§—É—Ç–±–æ–ª', callback_data='football_game'))
    kb.row(InlineKeyboardButton(text='‚¨ÜÔ∏è', callback_data='increase_bet'))
    kb.add(
        InlineKeyboardButton(text=f'{current_bet:.1f} USDT', callback_data='enter_bet'),
        InlineKeyboardButton(text='‚¨áÔ∏è', callback_data='decrease_bet'),
    )
    kb.row(InlineKeyboardButton(text='üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='reset_bet'))
    kb.row(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='home'))
    return kb.as_markup()
