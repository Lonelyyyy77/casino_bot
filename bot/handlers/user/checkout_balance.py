import asyncio
import re

from aiogram import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, InputMediaPhoto
import sqlite3

from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database import DB_NAME
from bot.database.user.user import get_menu_image
from bot.start_bot import crypto
from bot.states.user.user import WithdrawStates

router = Router()


@router.callback_query(lambda c: c.data == 'checkout_balance')
async def checkout_balance_handler(callback: CallbackQuery):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    telegram_id = callback.from_user.id

    cursor.execute("SELECT is_frizzed_checkout, balance FROM user WHERE telegram_id = ?", (telegram_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        conn.close()
        return

    is_frizzed_checkout, balance = user_data

    if is_frizzed_checkout == 1:
        await callback.answer("–î–æ—Å—Ç—É–ø –∫ –≤—ã–≤–æ–¥—É —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        conn.close()
        return

    conn.close()

    withdrawal_image = get_menu_image("withdraw")

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="2$", callback_data="withdraw_2"),
        InlineKeyboardButton(text="5$", callback_data="withdraw_5"),
        InlineKeyboardButton(text="10$", callback_data="withdraw_10"),
        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data="withdraw_manual")
    )

    text = f"üí∞ –í–∞—à –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance:.2f} USDT\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"

    if withdrawal_image:
        try:
            media = InputMediaPhoto(media=withdrawal_image, caption=text, parse_mode="HTML")
            await callback.message.edit_media(media=media, reply_markup=keyboard.as_markup())
        except TelegramBadRequest:
            await callback.message.answer_photo(photo=withdrawal_image, caption=text, reply_markup=keyboard.as_markup())
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await callback.message.answer(text, reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data.startswith("withdraw_"))
async def fixed_withdraw_handler(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    username = callback.from_user.username or f"ID: {telegram_id}"

    data = callback.data
    amount_dict = {
        "withdraw_2": 2.0,
        "withdraw_5": 5.0,
        "withdraw_10": 10.0
    }

    amount = amount_dict.get(data)

    if data == "withdraw_manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ USDT):")
        await state.set_state(WithdrawStates.waiting_for_amount)
        return
    elif amount is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM user WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()

    if not result:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    balance = result[0]
    withdrawal_image = get_menu_image("withdraw")
    channel_id = -1002453573888  # ID –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤

    if balance < amount:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", show_alert=True)
        conn.close()

        log_message = (f"üö® *–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*\n"
                       f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                       f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} USDT\n"
                       f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT)")

        await send_log_with_image(callback.bot, channel_id, withdrawal_image, log_message)
        return

    new_balance = balance - amount
    cursor.execute("UPDATE user SET balance = ? WHERE telegram_id = ?", (new_balance, telegram_id))
    conn.commit()
    conn.close()

    try:
        check = await crypto.create_check(asset='USDT', amount=amount)
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞")

        log_message = (f"üö® *–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞!*\n"
                       f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                       f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} USDT\n"
                       f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞")

        await send_log_with_image(callback.bot, channel_id, withdrawal_image, log_message)
        return

    check_str = str(check)
    pattern = r"bot_check_url='([^']+)'"
    match = re.search(pattern, check_str)

    link = match.group(1) if match else "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", url=link))

    response_text = (
        "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"üí∞ –°—É–º–º–∞: {amount:.2f} USDT\n"
        f"üÜî –ß–µ–∫ ID: {check.check_id}\n"
    )
    await callback.message.answer(response_text, reply_markup=kb.as_markup())

    # –õ–æ–≥ –≤ –∫–∞–Ω–∞–ª
    log_message = (f"‚úÖ *–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üí∞ –°—É–º–º–∞: {amount:.2f} USDT\n"
                   f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫]({link})")

    await send_log_with_image(callback.bot, channel_id, withdrawal_image, log_message)

    await asyncio.sleep(15)
    await callback.message.delete()


async def send_log_with_image(bot, channel_id, image, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ"""
    try:
        if image:
            await bot.send_photo(channel_id, photo=image, caption=text)
        else:
            await bot.send_message(channel_id, text)
    except TelegramBadRequest:
        await bot.send_message(channel_id, text)


@router.message(WithdrawStates.waiting_for_amount)
async def process_manual_withdraw(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username or f"ID: {telegram_id}"  # –ë–µ—Ä–µ–º username –∏–ª–∏ ID

    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM user WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()

    if not result:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        await state.clear()
        return

    balance = result[0]

    withdrawal_image = get_menu_image("withdraw")
    channel_id = -1002453573888  # ID –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤

    if balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        conn.close()
        await state.clear()

        log_message = (f"üö® *–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*\n"
                       f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                       f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} USDT\n"
                       f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT)")

        try:
            await message.bot.send_photo(channel_id, photo=withdrawal_image, caption=log_message)
        except TelegramBadRequest:
            await message.bot.send_message(channel_id, log_message, parse_mode="Markdown")

        return

    new_balance = balance - amount
    cursor.execute("UPDATE user SET balance = ? WHERE telegram_id = ?", (new_balance, telegram_id))
    conn.commit()
    conn.close()

    try:
        check = await crypto.create_check(asset='USDT', amount=amount)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞")
        await state.clear()

        log_message = (f"üö® *–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞!*\n"
                       f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                       f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} USDT\n"
                       f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞")

        try:
            await message.bot.send_photo(channel_id, photo=withdrawal_image, caption=log_message)
        except TelegramBadRequest:
            await message.bot.send_message(channel_id, log_message)

        return

    check_str = str(check)
    pattern = r"bot_check_url='([^']+)'"
    match = re.search(pattern, check_str)

    if match:
        link = match.group(1)
    else:
        link = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É"

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", url=link))

    response_text = (
        "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"üí∞ –°—É–º–º–∞: {amount:.2f} USDT\n"
        f"üÜî –ß–µ–∫ ID: {check.check_id}\n"
    )

    await message.answer(response_text, reply_markup=kb.as_markup())

    log_message = (f"‚úÖ *–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n"
                   f"üë§ –ò–≥—Ä–æ–∫: @{username}\n"
                   f"üí∞ –°—É–º–º–∞: {amount:.2f} USDT\n"
                   f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫]({link})")

    try:
        await message.bot.send_photo(channel_id, photo=withdrawal_image, caption=log_message)
    except TelegramBadRequest:
        await message.bot.send_message(channel_id, log_message)

    await state.clear()
    await asyncio.sleep(15)
    await message.delete()