import sqlite3

from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from bot.database import DB_NAME
from bot.states.admin.states import PromoState

router = Router()


@router.callback_query(lambda c: c.data == "create_promo")
async def start_promo_creation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(PromoState.waiting_for_code)


@router.message(PromoState.waiting_for_code)
async def get_promo_code(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper()

    if len(promo_code) < 3 or len(promo_code) > 20:
        await message.answer("–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(promo_code=promo_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞ (–≤ USDT):")
    await state.set_state(PromoState.waiting_for_amount)


@router.message(PromoState.waiting_for_amount)
async def get_promo_amount(message: types.Message, state: FSMContext):
    try:
        bonus_amount = float(message.text.replace(',', '.'))
        if bonus_amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 20 USDT).")
        return

    await state.update_data(bonus_amount=bonus_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
    await state.set_state(PromoState.waiting_for_activations)


@router.message(PromoState.waiting_for_activations)
async def get_promo_activations(message: types.Message, state: FSMContext):
    try:
        max_activations = int(message.text)
        if max_activations < 1:
            raise ValueError
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return

    data = await state.get_data()
    promo_code = data["promo_code"]
    bonus_amount = data["bonus_amount"]

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    try:
        cursor.execute(
            "INSERT INTO promo_codes (code, bonus_amount, max_activations) VALUES (?, ?, ?)",
            (promo_code, bonus_amount, max_activations),
        )
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code}</b> —Å–æ–∑–¥–∞–Ω!\n"
                             f"üí∞ –ë–æ–Ω—É—Å: {bonus_amount:.2f} USDT\n"
                             f"üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {max_activations}",
                             parse_mode="HTML")
    except sqlite3.IntegrityError:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")

    conn.close()
    await state.clear()
