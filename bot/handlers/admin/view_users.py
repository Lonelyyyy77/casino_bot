import sqlite3

from aiogram import types, Router
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database import DB_NAME
from bot.database.admin.admin import is_admin
from math import ceil

router = Router()

PAGE_SIZE = 4


@router.callback_query(lambda c: c.data.startswith("view_users"))
async def view_users(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id, local_ip, username, language_layout, device, telegram_id, balance, total_bets, is_frizzed_checkout FROM user;")
    users = cursor.fetchall()
    conn.close()

    if not users:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        page = int(callback.data.split(":")[1]) if ":" in callback.data else 1
    except ValueError:
        page = 1

    total_pages = ceil(len(users) / PAGE_SIZE)

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    start_index = (page - 1) * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    users_on_page = users[start_index:end_index]

    user_list = "\n".join(
        [
            f"{user[0]}:\n"
            f" |- üë§ @{user[2]}\n"
            f" |- DEVICEüì± - {user[4]}\n"
            f" |- IPüì° - {user[1]}\n"
            f" |- üÜî (#id_{user[5]})\n"
            f" |- üåç {user[3].upper()}\n"
            f" |- üè¶ {round(user[6], 3)} JPC | {round(user[6], 3)}$\n"
            f" |- üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Å—Ç–∞–≤–∫–∏: {round(user[7], 3)} JPC\n"
            f" |- üîí –°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞: {'‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω' if user[8] == 1 else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}"
            for user in users_on_page
        ]
    )

    kb = InlineKeyboardBuilder()
    for user in users_on_page:
        user_status = '‚ùÑÔ∏è' if user[8] == 1 else '‚úÖ'
        kb.row(InlineKeyboardButton(text=f"{user[5]} {user_status}", callback_data=f"toggle_frost_{user[5]}"))

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_users:{page - 1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"view_users:{page + 1}"))
    if nav_buttons:
        kb.row(*nav_buttons)

    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n{user_list}",
        reply_markup=kb.as_markup()
    )



@router.callback_query(lambda c: c.data.startswith("toggle_frost_"))
async def toggle_frost_handler(callback: CallbackQuery):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)
        return

    target_id = callback.data.split("_")[-1]

    cursor.execute("SELECT is_frizzed_checkout FROM user WHERE telegram_id = ?", (target_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    current_status = user_data[0]
    new_status = 1 if current_status == 0 else 0

    cursor.execute(
        "UPDATE user SET is_frizzed_checkout = ? WHERE telegram_id = ?", (new_status, target_id)
    )
    conn.commit()

    status_text = "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω" if new_status == 1 else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status_text}", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await view_users(callback)
